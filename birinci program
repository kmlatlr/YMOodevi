//BİRİNCİ BOMBOM OYUNU
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class bombomcandy {

    private static final int ROWS = 10;
    private static final int COLS = 10;
    private static char[][] gameBoard;

    public static void main(String[] args) {
    	// Burada haritayı oluşturuyoruz
        char[][] harita = generateHarita();
        
        // Burada haritayı dosyaya kaydediyoruz
        saveHaritaToFile(harita, "harita.txt");
        
        // Burada dosyadan haritayı okuyarak oyun tahtasını başlatıyoruz
        initializeGameBoard("harita.txt");
        printGameBoard();

        // Kullanıcıdan koordinat alınarak oyun devam ettiriliyor
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print("Lütfen koordinat giriniz (örn. 4 5): ");
            String input = scanner.nextLine();

            // Kullanıcı "0 0" girdiğinde oyun sonlandırılıyor.
            if (input.equals("0 0")) {
                System.out.println("GÜLE GÜLE!");
                break;
            }
            
            String[] coordinates = input.split(" ");
            int row = Integer.parseInt(coordinates[0]) - 1; // 1 çıkarıyoruz
            int col = Integer.parseInt(coordinates[1]) - 1; // 1 çıkarıyoruz

            // Girilen koordinat geçerli mi kontrol ediyoruz
            if (isValidCoordinate(row, col)) {
                // Koordinat işleniyor ve oyun tahtası yeniden yazdırılıyor
            	processCoordinate(row, col);
                printGameBoard();
            } else {
                // Geçersiz koordinat durumunda kullanıcı uyarılıyor
                System.out.println("Geçersiz koordinat. Lütfen tekrar deneyin.");
            }
        }

        scanner.close();
    }
    
    // Örnek bir harita oluşturuluyor
    private static char[][] generateHarita() {
        char[][] harita = new char[10][10];

        char[][] exampleHarita = {
                {'3', '7', '7', '7', '1', '2', '1', '4', '1', '9'},
                {'6', '1', '2', '7', '5', '1', '9', '1', '8', '1'},
                {'1', '3', '1', '7', '7', '8', '1', '5', '1', '4'},
                {'5', '1', '1', '1', '8', '4', '4', '2', '5', '1'},
                {'1', '8', '1', '3', '1', '4', '6', '7', '1', '2'},
                {'9', '1', '3', '1', '9', '4', '8', '1', '2', '1'},
                {'3', '6', '6', '2', '1', '3', '1', '3', '1', '2'},
                {'7', '1', '6', '2', '4', '1', '8', '3', '3', '3'},
                {'2', '2', '2', '2', '1', '5', '5', '5', '1', '3'},
                {'9', '1', '8', '1', '6', '5', '9', '4', '8', '9'}
        };

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                harita[i][j] = exampleHarita[i][j];
            }
        }

        return harita;
    }
    
    // Harita dosyaya yazdırılıyor
    private static void saveHaritaToFile(char[][] harita, String fileName) {
        try (FileWriter writer = new FileWriter(fileName)) {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    writer.write(harita[i][j] + " ");
                }
                writer.write("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    // Oyun tahtası dosyadan okunarak başlatılıyor
    private static void initializeGameBoard(String fileName) {
        gameBoard = new char[ROWS][COLS];

        try {
            Scanner fileScanner = new Scanner(new File(fileName));

            for (int i = 0; i < ROWS; i++) {
                String line = fileScanner.nextLine();
                for (int j = 0; j < COLS; j++) {
                    gameBoard[i][j] = line.charAt(j * 2); // İki karakter arasındaki boşluğu atlama
                }
            }

            fileScanner.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Oyun tahtasını ekrana yazdırmak için
    private static void printGameBoard() {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                System.out.print(gameBoard[i][j] + " ");
            }
            System.out.println();  // Bu satırı ekledim
        }
    }

    // Girilen koordinatın geçerli olup olmadığını kontrol etmek için
    private static boolean isValidCoordinate(int row, int col) {
        return row >= 0 && row < ROWS && col >= 0 && col < COLS;
    }
    
    // Girilen koordinatı işleyerek oyun tahtasını güncellemek için
    private static void processCoordinate(int row, int col) {
        char selectedNumber = gameBoard[row][col];
        char[][] visited = new char[ROWS][COLS]; // Ziyaret edilen hücreleri takip etmek için kullanılır
        checkAndReplaceNeighbors(row, col, selectedNumber, visited);
    }
    
    // Komşu hücreleri kontrol ediyoruz
    private static void checkAndReplaceNeighbors(int row, int col, char selectedNumber, char[][] visited) {
        if (row < 0 || row >= ROWS || col < 0 || col >= COLS || visited[row][col] == '1') {
            return;
        }

        visited[row][col] = '1'; // Hücreyi ziyaret ettiğimizi belirt

        if (gameBoard[row][col] == selectedNumber) {
            gameBoard[row][col] = 'X';

            checkAndReplaceNeighbors(row, col + 1, selectedNumber, visited); // Sağa
            checkAndReplaceNeighbors(row, col - 1, selectedNumber, visited); // Sola
            checkAndReplaceNeighbors(row + 1, col, selectedNumber, visited); // Aşağı
            checkAndReplaceNeighbors(row - 1, col, selectedNumber, visited); // Yukarı
        }
    }
}
